name: Build_oneplus_sm8750
on:
  workflow_dispatch:
    inputs:
      REPO_MANIFEST:
        description: "📝请选择要编译的机型："
        required: true
        type: choice
        options:
          - 'oneplus_ace5_ultra'

        default: 'oneplus_ace5_ultra'

      keep_original_settings:
        description: "📝保持原内核名称及构建时间(不懂请保持默认)"
        required: false
        default: true
        type: boolean

      custom_kernel_suffix:
        description: "✏️ 自定义内核名称- 仅在取消勾选'保持原设置'时有效(不懂请保持默认)"
        required: false
        default: ''
      
      custom_kernel_time:
        description: "⏰ 自定义构建时间- 仅在取消勾选'保持原设置'时有效(不懂请保持默认)"
        required: false
        default: ''

      enable_feature_z:
        description: "添加风驰驱动"
        required: false
        default: true
        type: boolean

      enable_feature_b:
         description: "添加BBR控制算法"
         required: false
         default: false
         type: boolean


env:
  REPO_MANIFEST: oneplus_ace5_ultra   # 不要带 .xml
  DEVICES_NAME: oneplus_ace5_ultra
jobs:
  build:
    name: Build_${{ github.event.inputs.REPO_MANIFEST }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: 📊 Check disk space (检查磁盘空间)
        run: |
          echo "构建前磁盘空间："
          df -h
          export REPO_MANIFEST="${{ github.event.inputs.REPO_MANIFEST }}"

#      - name: ⚙️ Set REPO_MANIFEST (设置对应机型配置文件)
#        id: set_manifest
#        run: |
#          cp "${GITHUB_WORKSPACE}/.github/workflows/Bin/main.bin" ./
#          chmod +x main.bin
#          ./main.bin "setup_device_info" "${{ github.event.inputs.REPO_MANIFEST }}"
#          rm -rf ./main.bin

      - name: ⚙️ Set KERNEL_TIME (设置构建时间)
        id: set_kernel_time
        run: |
          if [ "$KEEP_ORIGINAL" = "false" ] && [ -n "$CUSTOM_TIME" ]; then
            echo "使用自定义构建时间: $CUSTOM_TIME"
            echo "KERNEL_TIME=$CUSTOM_TIME" >> $GITHUB_ENV
          else
            case "$DEVICES_NAME" in
              oneplus_13 | oneplus_ace5_pro | realme_GT7pro | realme_GT7pro_Speed)
                echo 'KERNEL_TIME=Tue Dec 17 23:36:49 UTC 2024' >> $GITHUB_ENV
                ;;
              oneplus_13t)
                echo 'KERNEL_TIME=FriApr 25 01:56:53 UTC 2025' >> $GITHUB_ENV
                ;;
              oneplus_pad_2_pro)
                echo 'KERNEL_TIME=Tue Mar 4 09:04:13 UTC 2025' >> $GITHUB_ENV
                ;;
              oneplus_ace5_ultra)
                echo 'KERNEL_TIME=Fri Apr 18 19:35:07 UTC 2025' >> $GITHUB_ENV
                ;;
            esac
          fi

      - name: ⚙️ Set device-specific CCACHE_DIR (设置对应机型Cceche路径)
        run: |
          echo "CCACHE_DIR=$HOME/.ccache_${REPO_MANIFEST}" >> $GITHUB_ENV

      - name: 📦 Configure Git (设置下载账户)
        run: |
          git config --global user.name "vring"
          git config --global user.email "sucisama2888@gmail.com"

      - name: 🛠 Configure APT caching (配置APT缓存)
        run: |
          APT_CACHE_DIR="$HOME/apt-cache"
          mkdir -p "$APT_CACHE_DIR"/{archives,lists/partial}
          echo "Dir::Cache \"$APT_CACHE_DIR\";" | sudo tee /etc/apt/apt.conf.d/90user-cache
          echo "Dir::Cache::archives \"$APT_CACHE_DIR/archives\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          echo "Dir::State::lists \"$APT_CACHE_DIR/lists\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          echo "Acquire::Check-Valid-Until \"false\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          echo "Acquire::Languages \"none\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          sudo chown -R $USER:$USER "$APT_CACHE_DIR"

      - name: 🛠 Cache APT packages (缓存APT包)
        uses: actions/cache@v3
        with:
          path: ${{ env.HOME }}/apt-cache
          key: ${{ runner.os }}-apt-${{ hashFiles('.github/workflows/Build_oneplus_sm875-Image.yml') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      - name: 📦 Install dependencies (安装依赖)
        run: |
          sudo rm -f /var/lib/apt/lists/lock /var/lib/dpkg/lock
          APT_CACHE_DIR="$HOME/apt-cache"
          mkdir -p "$APT_CACHE_DIR/lists/partial"
          sudo apt -o Dir::Cache="$APT_CACHE_DIR" update -qq
          sudo DEBIAN_FRONTEND=noninteractive apt -o Dir::Cache="$APT_CACHE_DIR" install -yq --no-install-recommends \
            python3 p7zip-full git curl ccache libelf-dev \
            build-essential libelf-dev flex bison libssl-dev \
            libncurses-dev liblz4-tool zlib1g-dev \
            libxml2-utils rsync unzip
          
          echo "✅ 依赖安装完成"

      - name: 📥 Restore ccache (载入 机型：${{ env.DEVICES_NAME }}的 ccache 缓存)
        uses: actions/cache@v3
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ runner.os }}-${{ github.ref }}-${{ env.REPO_MANIFEST }}
          restore-keys: |
            ccache-${{ runner.os }}-${{ env.REPO_MANIFEST }}-
            ccache-${{ runner.os }}-

      - name: 📥 Init ccache (如果是第一次运行则初始化Cceche)
        run: |
          export CCACHE_COMPILERCHECK="%compiler% -dumpmachine; %compiler% -dumpversion"
          export CCACHE_NOHASHDIR="true"
          export CCACHE_HARDLINK="true"
          export CCACHE_DIR="${{ env.CCACHE_DIR }}"
          export CCACHE_MAXSIZE="8G"

          INIT_FLAG="$CCACHE_DIR/.ccache_initialized"
          if command -v ccache >/dev/null 2>&1; then
            if [ ! -f "$INIT_FLAG" ]; then
              echo "初始化 ccache ($CCACHE_DIR)..."
              mkdir -p "$CCACHE_DIR"
              ccache -M "$CCACHE_MAXSIZE"
              touch "$INIT_FLAG"
            else
              echo "ccache 已初始化，跳过"
            fi
          else
            echo "未安装 ccache，跳过"
          fi


      - name: 📥 Install repo tool (下载repo工具)
        run: |
         curl https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
         chmod a+x ~/repo
         sudo mv ~/repo /usr/local/bin/repo

      - name: 📥 Initialize repo and sync (初始化repo并同步内核源码)
        run: |
         mkdir kernel_workspace && cd kernel_workspace
         repo init -u https://github.com/showdo/kernel_manifest.git -b refs/heads/oneplus/sm8750 -m ${REPO_MANIFEST}.xml --depth=1
         repo --trace sync -c -j$(nproc --all) --no-tags
         rm kernel_platform/common/android/abi_gki_protected_exports_* || echo "No protected exports!"
         rm kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports!"
          

      - name: Kernel Version Handling
        run: |
          cd kernel_workspace/kernel_platform
          # 获取内核 Android 版本号(KANDROID_VERSION)以及内核版本号(KERNEL_VERSION)
          for f in ./common/build.config.constants ./common/build.config.common; do
            if [ -f "$f" ]; then
              BRANCH=$(grep -m1 '^BRANCH=' "$f" | cut -d= -f2)
              [ -n "$BRANCH" ] && break
            fi
          done

          if [ -n "$BRANCH" ]; then
            echo "KANDROID_VERSION=${BRANCH%-*}" >> $GITHUB_ENV
            echo "KERNEL_VERSION=${BRANCH#*-}" >> $GITHUB_ENV
          else
            echo "No BRANCH found in build.config files"
          fi

          # 从 Makefile 获取完整内核版本号(TKERNEL_VERSION)以及可选的修改内核等级
          ORIG_VERSION=$(awk '/^VERSION =/ {v=$3} /^PATCHLEVEL =/ {p=$3} /^SUBLEVEL =/ {s=$3} END {print v"."p"."s}' ./common/Makefile)

          # 强制修改 SUBLEVEL(内核等级)，默认关闭
          # sed -i 's/^SUBLEVEL[[:space:]]*=[[:space:]]*.*/SUBLEVEL = 99/' ./common/Makefile

          # 读取修改后的版本
          NEW_VERSION=$(awk '/^VERSION =/ {v=$3} /^PATCHLEVEL =/ {p=$3} /^SUBLEVEL =/ {s=$3} END {print v"."p"."s}' ./common/Makefile)

          if [ "$ORIG_VERSION" != "$NEW_VERSION" ]; then
            echo "Kernel Version:$ORIG_VERSION->$NEW_VERSION"
            echo "TKERNEL_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          else
            echo "Kernel Version:$ORIG_VERSION No changes"
            echo "TKERNEL_VERSION=$ORIG_VERSION" >> $GITHUB_ENV
          fi

      - name: ⚙️ Set SuKiSU Ultra (设置SuKiSU Ultra)
        run: |
          mkdir -p kernel_workspace/kernel_platform
          cd kernel_workspace/kernel_platform
          
          BRANCH_NAME="susfs-main"
          CUSTOM_TAG="vring"
          curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash -s "97e1250d"
          cd KernelSU
          KSU_API_VERSION=$(cat "kernel/Makefile" | \
            grep -m1 "KSU_VERSION_API :=" | awk -F'= ' '{print $2}' | tr -d '[:space:]')

          if [[ -z "$KSU_API_VERSION" || "$(printf '%s\n' "$KSU_API_VERSION" "3.1.7" | sort -V | head -n1)" != "3.1.7" ]]; then
            KSU_API_VERSION="3.1.7"
          fi

          echo "KSU_API_VERSION=$KSU_API_VERSION" >> $GITHUB_ENV

          GIT_HASH=$(git rev-parse --short HEAD)
          echo "GIT_HASH=$GIT_HASH"

       
          if [[ -z "$CUSTOM_TAG" || "$CUSTOM_TAG" == "$BRANCH_NAME" ]]; then
            VERSION_FULL="v$KSU_API_VERSION-$GIT_HASH@$BRANCH_NAME"
          else
            VERSION_FULL="v$KSU_API_VERSION-$CUSTOM_TAG@$BRANCH_NAME[$GIT_HASH]"
          fi
          
          VERSION_FULL="v$KSU_API_VERSION-$GIT_HASH@vring"
          sed -i '/define get_ksu_version_full/,/endef/d' kernel/Makefile
          sed -i '/KSU_VERSION_API :=/d' kernel/Makefile
          sed -i '/KSU_VERSION_FULL :=/d' kernel/Makefile

          VERSION_DEFINITIONS=$(cat <<EOF
            define get_ksu_version_full
            $VERSION_FULL
            endef

            KSU_VERSION_API := $KSU_API_VERSION
            KSU_VERSION_FULL := $VERSION_FULL
          EOF
          )

          awk -v def="$VERSION_DEFINITIONS" '
            /REPO_OWNER :=/ {print; print def; inserted=1; next}
            1
            END {if (!inserted) print def}
          ' kernel/Makefile > kernel/Makefile.tmp && mv kernel/Makefile.tmp kernel/Makefile

          KSU_VERSION=$(expr $(git rev-list --count 0af1ab28 2>/dev/null || echo 13000) + 10700)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV

          echo "::group::最终 Makefile 中版本信息及部分调试结果预览"
          grep -A10 "REPO_OWNER" kernel/Makefile
          grep "KSU_VERSION_FULL" kernel/Makefile
          echo "::endgroup::"
          

      - name: 🔧 Set up SUSFS (配置 SUSFS)
        run: |
          cd kernel_workspace
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-android15-6.6
          
          cd susfs4ksu
          git checkout 2598fee8
          cd ../
          
          git clone https://github.com/SukiSU-Ultra/SukiSU_patch.git
          
          cd kernel_platform        
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-android15-6.6.patch ./common/
          cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
          
          cp -r ../SukiSU_patch/other/zram/lz4k/include/linux/* ./common/include/linux
          cp -r ../SukiSU_patch/other/zram/lz4k/lib/* ./common/lib
          cp -r ../SukiSU_patch/other/zram/lz4k/crypto/* ./common/crypto
          cp -r ../SukiSU_patch/other/zram/lz4k_oplus ./common/lib/
          
          # Apply patches
          cd ./common
          if [ "$DEVICES_NAME" != "oneplus_ace5_ultra" ]; then
          
          
          LZ4_VERSION="1.10.0"
          LZ4_DOWNLOAD_URL="https://github.com/lz4/lz4/archive/refs/tags/v${LZ4_VERSION}.tar.gz"

          mkdir -p lz4_temp && cd lz4_temp
          echo "下载LZ4 ${LZ4_VERSION}源码..."
          curl -Ls "${LZ4_DOWNLOAD_URL}" -o lz4.tar.gz
          tar -zxf lz4.tar.gz --strip-components=1
          

          echo "复制LZ4文件到内核目录..."

          cp lib/lz4.c ../lib/lz4v2_core.c
          cp lib/lz4.h ../lib/lz4v2_core.h
          cp lib/lz4hc.c ../lib/lz4v2_hc.c
          cp lib/lz4hc.h ../lib/lz4v2_hc.h

          mkdir -p ../include/linux/lz4v2
          cp lib/lz4.h ../include/linux/lz4v2/lz4.h
          cp lib/lz4hc.h ../include/linux/lz4v2/lz4hc.h
          
          # 全局重命名函数和宏（彻底隔离命名空间）
          echo "重命名符号以避免冲突..."
          # 核心压缩函数重命名
          sed -i 's/LZ4_compress_default/lz4v2_compress_default/g' ../lib/lz4v2_core.c ../lib/lz4v2_core.h
          sed -i 's/LZ4_decompress_safe/lz4v2_decompress_safe/g' ../lib/lz4v2_core.c ../lib/lz4v2_core.h
          # HC高压缩函数重命名
          sed -i 's/LZ4_compress_HC/lz4v2_compress_HC/g' ../lib/lz4v2_hc.c ../lib/lz4v2_hc.h
          # 内部宏和辅助函数重命名
          sed -i 's/LZ4_/LZ4V2_/g' ../lib/lz4v2_core.c ../lib/lz4v2_core.h ../lib/lz4v2_hc.c ../lib/lz4v2_hc.h
          
          # 添加内核兼容性适配
          echo "添加内核适配代码..."
          # 引入内核必要头文件
          sed -i '1i#include <linux/types.h>' ../lib/lz4v2_core.c
          sed -i '2i#include <linux/kernel.h>' ../lib/lz4v2_core.c
          sed -i '3i#include <linux/module.h>' ../lib/lz4v2_core.c
          # HC文件同样处理
          sed -i '1i#include <linux/types.h>' ../lib/lz4v2_hc.c
          sed -i '2i#include <linux/kernel.h>' ../lib/lz4v2_hc.c
          sed -i '3i#include <linux/module.h>' ../lib/lz4v2_hc.c
          
          # 添加模块声明（符合内核规范）
          echo "添加模块元数据..."
          cat >> ../lib/lz4v2_core.c << 'EOF'
          MODULE_LICENSE("GPL");
          MODULE_DESCRIPTION("LZ4 1.10.0 Compression (v2)");
          MODULE_AUTHOR("LZ4 Project");
          EXPORT_SYMBOL(lz4v2_compress_default);
          EXPORT_SYMBOL(lz4v2_decompress_safe);
          EOF
               
          cat >> ../lib/lz4v2_hc.c << 'EOF'
          MODULE_LICENSE("GPL");
          MODULE_DESCRIPTION("LZ4HC 1.10.0 Compression (v2)");
          MODULE_AUTHOR("LZ4 Project");
          EXPORT_SYMBOL(lz4v2_compress_HC);
          EOF
          
          # 更新Makefile确保编译（独立于LZ4K）
          echo "更新Makefile配置..."
          if ! grep -q "lz4v2_core.o" ../lib/Makefile; then
          echo "obj-\$(CONFIG_LZ4V2_COMPRESS) += lz4v2_core.o" >> ../lib/Makefile
          echo "obj-\$(CONFIG_LZ4V2_COMPRESS) += lz4v2_hc.o" >> ../lib/Makefile
          fi
          
          # 清理临时文件
          cd .. && rm -rf lz4_temp
          echo "LZ4 ${LZ4_VERSION}集成完成（与LZ4K兼容）"
          #                for file in "${files[@]}"; do
          #                    if [ -e "$file" ]; then
          #                        rm "$file"
          #                    fi
          #                done
          
          #                cp "${GITHUB_WORKSPACE}/.github/workflows/Bin/main.bin" ./
          #                chmod +x main.bin
          #                ./main.bin "setup_lz4"
          #                rm -rf ./main.bin
          fi
          
          if [ "${REPO_MANIFEST}" != "oneplus_13t" ] && [ "${REPO_MANIFEST}" != "oneplus_ace5_ultra" ] && [ "${REPO_MANIFEST}" != "oneplus_pad_2_pro" ]; then
          sed -i 's/-32,12 +32,38/-32,11 +32,37/g' 50_add_susfs_in_gki-android15-6.6.patch
          sed -i '/#include <trace\/hooks\/fs.h>/d' 50_add_susfs_in_gki-android15-6.6.patch
          fi
          
          patch -p1 < 50_add_susfs_in_gki-android15-6.6.patch || true
          cp ../../SukiSU_patch/hooks/syscall_hooks.patch ./
          patch -p1 -F 3 < syscall_hooks.patch
          
          echo "完成"


      - name: 🔧 Cache HMBird patch (缓存HMBird补丁)
        uses: actions/cache@v3
        with:
          path: ${{ runner.temp }}/hmbird_patch.c
          key: hmbird-patch-v1
          restore-keys: |
            hmbird-patch-v1
    

      - name: 🔧 Apply HMBird GKI patch (写入单Boot开机补丁)
        run: |
          PATCH_FILE="${{ runner.temp }}/hmbird_patch.c"
          if [ ! -f "$PATCH_FILE" ]; then
            echo "下载HMBird补丁..."
            cp "${GITHUB_WORKSPACE}/hmbird_patch.c" "$PATCH_FILE"
          fi
          
          cd kernel_workspace/kernel_platform/common/drivers
          cp "$PATCH_FILE" hmbird_patch.c
          
          if ! grep -q "hmbird_patch.o" Makefile; then
            echo "obj-y += hmbird_patch.o" >> Makefile
          fi
          echo "HMBird补丁应用完成"

      - name: Apply LSM_BBG
        run: |
          cd kernel_workspace/kernel_platform/common
          echo "正在启用内核级基带保护支持…"
          curl -LSs https://raw.githubusercontent.com/vc-teahouse/Baseband-guard/main/setup.sh | bash
          sed -i '/^config LSM$/,/^help$/{ /^[[:space:]]*default/ { /baseband_guard/! s/bpf/bpf,baseband_guard/ } }' ./security/Kconfig

      - name: 🔧 Set gki_defconfig (设置编译配置)
        env:
          ENABLE_B: ${{ github.event.inputs.enable_feature_b }}
        run: |
          cd kernel_workspace/kernel_platform
          CONFIG_FILE=./common/arch/arm64/configs/gki_defconfig
          KERNEL_VERSION="6.6"

          # SukiSU Ultra配置
          echo "CONFIG_KSU=y" >> "$CONFIG_FILE"

          # KPM配置

          echo "CONFIG_KPM=y" >> "$CONFIG_FILE"


          # HOOK配置
      
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_MANUAL_HOOK=y" >> "$CONFIG_FILE"
  

          # SUSFS配置
          echo "CONFIG_KSU_SUSFS=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> "$CONFIG_FILE"

          # TMPFS配置*
          echo "CONFIG_TMPFS_XATTR=y" >> "$CONFIG_FILE"
          echo "CONFIG_TMPFS_POSIX_ACL=y" >> "$CONFIG_FILE"

          # BBR配置*
          echo "CONFIG_TCP_CONG_ADVANCED=y" >> "$CONFIG_FILE"
          echo "CONFIG_TCP_CONG_BBR=y" >> "$CONFIG_FILE"
          echo "CONFIG_NET_SCH_FQ=y" >> "$CONFIG_FILE"
          echo "CONFIG_TCP_CONG_BIC=n" >> "$CONFIG_FILE"
          echo "CONFIG_TCP_CONG_WESTWOOD=n" >> "$CONFIG_FILE"
          echo "CONFIG_TCP_CONG_HTCP=n" >> "$CONFIG_FILE"

          # ECN配置*
          echo "CONFIG_IP_ECN=y" >> "$CONFIG_FILE"
          echo "CONFIG_TCP_ECN=y" >> "$CONFIG_FILE"
          echo "CONFIG_IPV6_ECN=y" >> "$CONFIG_FILE"
          echo "CONFIG_IP_NF_TARGET_ECN=y" >> "$CONFIG_FILE"



          # LZ4 1.10.0
          echo "CONFIG_LZ4V2_COMPRESS=y" >> "$CONFIG_FILE"
          echo "CONFIG_LZ4V2_HC=y" >> "$CONFIG_FILE"
          echo "CONFIG_LZ4V2_DEBUG=n" >> "$CONFIG_FILE"

          sudo sed -i 's/check_defconfig//' ./common/build.config.gki
          cd common
          git add -A && git commit -a -m "BUILD Kernel"

      - name: 🔧 Set Kernel name (设置内核名称)
        env:
          REPO_MANIFEST: ${{ github.event.inputs.REPO_MANIFEST }}
          KEEP_ORIGINAL: ${{ github.event.inputs.keep_original_settings }}
          CUSTOM_SUFFIX: ${{ github.event.inputs.custom_kernel_suffix }}
        run: |
          cd kernel_workspace/kernel_platform

          case "$DEVICES_NAME" in
            oneplus_13 | oneplus_ace5_pro | realme_GT7pro | realme_GT7pro_Speed)
              DEFAULT_SUFFIX="-android15-8-g013ec21bba94-abogki383916444-4k"
              ;;
            oneplus_13t)
              DEFAULT_SUFFIX="-android15-8-gba3bcfd39307-abogki413159095-4k"
              ;;
            oneplus_pad_2_pro)
              DEFAULT_SUFFIX="-android15-8-g302cb15749a8-ab13157299-4k"
              ;;
            oneplus_ace5_ultra)
              DEFAULT_SUFFIX="-android15-8-gfc70d29746a7-abogki412262948-4k"
              ;;
          esac
          DEFAULT_SUFFIX="-android15-8-gfc70d29746a7-abogki412262948-4k"
          echo "当前机型: $DEVICES_NAME"
          echo "保持原设置: $KEEP_ORIGINAL"
          echo "自定义后缀: $CUSTOM_SUFFIX"
          echo "默认后缀: $DEFAULT_SUFFIX"
          
          if [ "$KEEP_ORIGINAL" = "false" ]; then
            if [ -n "$CUSTOM_SUFFIX" ]; then
              DEFAULT_SUFFIX="$CUSTOM_SUFFIX"
              echo "使用自定义内核名称: $DEFAULT_SUFFIX"
            else
              echo "使用机型默认内核名称: $DEFAULT_SUFFIX"
            fi
          else
            echo "保持原内核名称设置"
          fi
          ESCAPED_SUFFIX=$(printf '%s\n' "$DEFAULT_SUFFIX" | sed 's:[\/&]:\\&:g')
          cp "${GITHUB_WORKSPACE}/.github/workflows/Bin/main.bin" ./
          sudo sed -i "s/-4k/$ESCAPED_SUFFIX/g" ./common/arch/arm64/configs/gki_defconfig
          sed -i 's/${scm_version}//' ./common/scripts/setlocalversion

      - name: 🔧 Add sched_ext (写入风驰补丁)
        if: ${{inputs.enable_feature_z }}
        run: |
         cd kernel_workspace/kernel_platform/
         git clone https://github.com/showdo/sched_ext.git
         cp -r ./sched_ext/* ./common/kernel/sched
         rm -rf ./sched_ext/.git
         cd common/kernel/sched  

      - name: 🔨 Build Kernel (构建内核)
        run: |
          export PATH="/usr/lib/ccache:$GITHUB_WORKSPACE/kernel_workspace/kernel_platform/prebuilts/clang/host/linux-x86/clang-r510928/bin:$PATH"          
          export CCACHE_COMPILERCHECK="%compiler% -dumpmachine; %compiler% -dumpversion"
          export CCACHE_NOHASHDIR="true"
          export CCACHE_HARDLINK="true"
          export CCACHE_DIR="${{ env.CCACHE_DIR }}"
          export CCACHE_MAXSIZE="8G"
          export KBUILD_BUILD_TIMESTAMP="${KERNEL_TIME}"
          cd kernel_workspace/kernel_platform/common
          make -j$(nproc --all) LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CC="ccache clang" RUSTC=../../prebuilts/rust/linux-x86/1.73.0b/bin/rustc PAHOLE=../../prebuilts/kernel-build-tools/linux-x86/bin/pahole LD=ld.lld HOSTLD=ld.lld O=out KCFLAGS+=-O2  gki_defconfig
          make -j$(nproc --all) LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CC="ccache clang" RUSTC=../../prebuilts/rust/linux-x86/1.73.0b/bin/rustc PAHOLE=../../prebuilts/kernel-build-tools/linux-x86/bin/pahole LD=ld.lld HOSTLD=ld.lld O=out KCFLAGS+=-O2  Image
          

      - name: Make AnyKernel3
        run: |
          git clone https://github.com/WildPlusKernel/AnyKernel3.git -b "gki-2.0"
          #git clone https://github.com/Numbersf/AnyKernel3 --depth=1
          rm -rf ./AnyKernel3/.git
          #cd kernel_workspace/kernel_platform/common/Image
          dir1=""
          dir2=""
          image_path=$(find "./kernel_workspace/kernel_platform/common/out/" -name "Image" | head -n 1)
          if [ -n "$image_path" ]; then
            dir1=$(dirname "$image_path")/
            echo "使用 make 编译的统一路径，成功找到 Image 文件"
          else
            image_path=$(find "./kernel_workspace/kernel_platform/out/" -name "Image" | head -n 1)
            if [ -n "$image_path" ]; then
              dir2=$(dirname "$image_path")/
              echo "使用官方脚本编译，成功找到 Image 文件"
            else
              echo "未找到 Image 文件，构建失败" >&2
              exit 1
            fi
          fi
          if [ -n "$image_path" ] && [ -f "$image_path" ]; then
            echo "Image file finally located at: $image_path"
            cp "$image_path" ./AnyKernel3/Image
          fi


      - name: Apply patch_linux and replace Image
        run: |
          cd ./AnyKernel3
          curl -LO --retry 5 --retry-delay 2 --retry-connrefused https://raw.githubusercontent.com/Numbersf/Action-Build/SukiSU-Ultra/patches/patch_linux
          chmod +x patch_linux
          ./patch_linux
          rm -f patch_linux
          rm -f Image
          mv oImage Image


      - name: 📤 Upload AnyKernel3 (上传 Anykernel3)
        uses: actions/upload-artifact@v4
        with:
         name: AK3_${{ env.KSUVER }}_${{ env.TKERNEL_VERSION }}_SuKiSU
         path: ./AnyKernel3/*
